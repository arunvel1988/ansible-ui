
#######################################################################################
###
pip install ansible ansible-rulebook ansible-eda

apache.yml
- name: Restart Apache
  hosts: webserver
  become: yes
  tasks:
    - name: Restart Apache service
      service:
        name: apache2
        state: restarted


apache_rulebook.yml
- name: Restart Apache when event is fired
  hosts: localhost
  sources:
    - ansible.eda.file:
        path: /tmp/apache_events.json   # File we will write events to
  rules:
    - name: Restart Apache on alert
      condition: event.message == "apache_down"
      action:
        run_playbook:
          name: restart_apache.yml



ansible-rulebook -r apache_rulebook.yml -i inventory.ini

echo '{"message": "apache_down"}' >> /tmp/apache_events.json

###################################################################################
apache_rulebook.yml

- name: Restart Apache via Webhook
  hosts: localhost
  sources:
    - ansible.eda.webhook:
        host: 0.0.0.0     # Listen on all interfaces
        port: 5000        # Webhook server port

  rules:
    - name: Restart Apache on event
      condition: event.payload.action == "restart_apache"
      action:
        run_playbook:
          name: restart_apache.yml
          
####################################################################################

ansible-rulebook -r apache_rulebook.yml -i inventory.ini

app.py

from flask import Flask, jsonify, request
import requests

app = Flask(__name__)

# ðŸ‘‰ Change this to your Ansible EDA webhook endpoint
EDA_WEBHOOK_URL = "http://127.0.0.1:5000/endpoint"

@app.route("/")
def home():
    return """
    <h2>Ansible EDA Webhook Demo</h2>
    <button onclick="fetch('/start').then(r => r.json()).then(alert)">Start Apache</button>
    <button onclick="fetch('/stop').then(r => r.json()).then(alert)">Stop Apache</button>
    <button onclick="fetch('/restart').then(r => r.json()).then(alert)">Restart Apache</button>
    """

@app.route("/start", methods=["GET"])
def start_apache():
    payload = {"action": "start_apache"}
    response = requests.post(EDA_WEBHOOK_URL, json=payload)
    return jsonify({"status": "sent", "ansible_response": response.text})

@app.route("/stop", methods=["GET"])
def stop_apache():
    payload = {"action": "stop_apache"}
    response = requests.post(EDA_WEBHOOK_URL, json=payload)
    return jsonify({"status": "sent", "ansible_response": response.text})

@app.route("/restart", methods=["GET"])
def restart_apache():
    payload = {"action": "restart_apache"}
    response = requests.post(EDA_WEBHOOK_URL, json=payload)
    return jsonify({"status": "sent", "ansible_response": response.text})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)


    #####################################################################################
apache_rulebook.ym
- name: Apache Webhook Demo
  hosts: all
  sources:
    - ansible.eda.webhook:
        host: 0.0.0.0
        port: 5000

  rules:
    - name: Start Apache
      condition: event.action == "start_apache"
      action:
        run_playbook:
          name: start_apache.yml

    - name: Stop Apache
      condition: event.action == "stop_apache"
      action:
        run_playbook:
          name: stop_apache.yml

    - name: Restart Apache
      condition: event.action == "restart_apache"
      action:
        run_playbook:
          name: restart_apache.yml

          

###########################################################################################
start_apache.yml

- hosts: all
  tasks:
    - name: Start Apache
      service:
        name: apache2
        state: started

################################################################################
stop_apache.yml
- hosts: all
  tasks:
    - name: Stop Apache
      service:
        name: apache2
        state: stopped


##############################################################################

restart_apache.yml
- hosts: all
  tasks:
    - name: Restart Apache
      service:
        name: apache2
        state: restarted

ansible-rulebook -r apache_rulebook.yml -i inventory.ini



python3 app.py

###############################################################################################################
alerts.yml

groups:
- name: node_alerts
  rules:
  - alert: HighCPUUsage
    expr: 100 - (avg by(instance)(rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100) > 80
    for: 2m
    labels:
      severity: critical
    annotations:
      summary: "High CPU usage detected on {{ $labels.instance }}"
      description: "CPU usage is above 80% for more than 2 minutes"

#####################################################################################################

alertmanager.yml
route:
  receiver: ansible-eda

receivers:
- name: ansible-eda
  webhook_configs:
    - url: "http://<ansible-controller-ip>:5000/alerts"


#############################################################################################

prometheus_rulebook.yml
- name: Prometheus Alerts Rulebook
  hosts: all
  sources:
    - ansible.eda.webhook:
        host: 0.0.0.0
        port: 5000
        endpoint: /alerts

  rules:
    - name: Handle High CPU Usage
      condition: event.alert.labels.alertname == "HighCPUUsage"
      action:
        run_playbook:
          name: scale_out.yml

#####################################################
scale_out.yml
- hosts: localhost
  tasks:
    - name: Scale out an instance in GCP
      community.general.gcp_compute_instance:
        name: "extra-node"
        machine_type: "e2-medium"
        zone: "asia-south1-b"
        project: "arun-1988"
        auth_kind: serviceaccount
        service_account_file: "./service-account.json"
        state: present

#####################################################
ansible-rulebook -r prometheus_rulebook.yml -i inventory.ini

####################################
python3 -m venv myenv
source myenv/bin/activate
pip install ansible ansible-runner flask psutil
pip install ansible-rulebook

sudo apt update
sudo apt install stress -y


- name: Print hello when triggered
  hosts: localhost
  tasks:
    - name: Say Hello
      debug:
        msg: "Hello! Event triggered this playbook"

import ansible_runner
import time

print("Waiting for an event... (press Enter to trigger playbook)")

while True:
    input("Press Enter to trigger playbook: ")
    r = ansible_runner.run(private_data_dir='.', playbook='hello.yml')
    print(f"Playbook finished with status: {r.status}, rc: {r.rc}")

##########################################################################

pip install ansible ansible-runner psutil

- name: CPU Alert Response
  hosts: localhost
  tasks:
    - name: Print CPU alert
      debug:
        msg: "High CPU usage detected! Taking action..."

    - name: Kill stress process (if any)
      ansible.builtin.shell: |
        pkill -f stress || true

##################################################

import ansible_runner
import psutil
import time

CPU_THRESHOLD = 50  # % CPU usage to trigger playbook
CHECK_INTERVAL = 5  # seconds

print(f"Monitoring CPU... will trigger playbook if usage > {CPU_THRESHOLD}%")

while True:
    cpu = psutil.cpu_percent(interval=1)
    print(f"Current CPU usage: {cpu}%")

    if cpu > CPU_THRESHOLD:
        print("âš¡ Event: High CPU detected, running Ansible playbook...")
        r = ansible_runner.run(private_data_dir='.', playbook='cpu_alert.yml')
        print(f"Playbook finished with status: {r.status}, rc: {r.rc}")

    time.sleep(CHECK_INTERVAL)
###################################################################################

ansible-rulebook -r cpu_rulebook.yml -i localhost
python3 send_alert.py
##############################################


